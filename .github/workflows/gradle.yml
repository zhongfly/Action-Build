name: Build Apk

on: 
  workflow_dispatch:
    inputs:
      java_version:
        required: true
        default: '17'
      repo:
        required: true
      ref:
        required: false
        default: ''
      submodules:
        required: true
        default: 'false'
      gradle_version:
        required: false
        default: 'wrapper'
      build_command:
        required: true
        default: './gradlew assembleRelease'

jobs:
  gradle:
    name: Gradle CI Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 1 
          
      - name: Checkout submodules
        if: ${{ github.event.inputs.submodules != 'false' }}
        run: git submodule update --init --recursive

      - name: Prepare Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ github.event.inputs.java_version }}
          java-package: jdk+fx
          cache: 'gradle'

#       - uses: maxim-lobanov/setup-android-tools@v1
#         with:
#           packages: |
#             platform-tools
#             platforms;android-30
#             build-tools;30.0.2
#             ndk;22.1.7171670
#           cache: true

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build project
        run: |
          ${{ github.event.inputs.build_command }}
          
      - name: "Get apk's path"
        id: get_files
        uses: actions/github-script@v7
        with:
          script: |
            const path = require('path');
            const globber = await glob.create('**/*.apk');
            const files = await globber.glob();
            if ( files.length > 0 ) {
              const file = files[0];
              core.exportVariable( 'apk_path', file );
              core.exportVariable( 'apk_dir', path.dirname(file) );
            } else {
              core.setFailed(`Action failed because no apk found`);
            }
      - name: Sign APK
        id: sign_app
        uses: ilharp/sign-android-release@v1
        with:
          releaseDir: ${{ env.apk_dir }}
          signingKey: ${{ secrets.SIGN_FILE_BASE64 }}
          keyAlias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - name: Get Apk Info
        id: apk
        run: |
          find ${{ env.apk_dir }} -type f -name '*-temp.apk' | sudo xargs -I {} rm -f {}
          find ${{ env.apk_dir }} -type f -name '*-unsigned.apk' | sudo xargs -I {} rm -f {}
          file=$(find ${{ env.apk_dir }} -type f -name '*-signed.apk' -print | head -n 1)
          find $ANDROID_SDK_ROOT/cmdline-tools/ -type f -name apkanalyzer | sudo xargs -I {} ln -s {} /usr/bin/apkanalyzer
          echo "version_name=$(apkanalyzer manifest version-name $file)" >> "$GITHUB_OUTPUT"
          echo "version_code=$(apkanalyzer manifest version-code $file)" >> "$GITHUB_OUTPUT"
          echo "application_id=$(apkanalyzer manifest application-id $file)" >> "$GITHUB_OUTPUT"
      - name: upload artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{steps.apk.outputs.application_id}}_${{steps.apk.outputs.version_name}}_${{steps.apk.outputs.version_code}}
          path: ${{ env.apk_dir }}/*.apk
